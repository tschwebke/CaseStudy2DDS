)  +
coord_cartesian(ylim = c(0, 800)) +
scale_fill_brewer(palette = "Paired") +  ggthemes::theme_par()
# function to print bar plots for all factor comparisons to attrition
getFactorPctPlot <- function(df, x1, x2) {
s1 <- df[, c(x1, x2)]
names(s1) <- c("Col1", "Col2")
s1 <- s1 %>% group_by(Col1, Col2) %>% count(Col1)
s1 <- do.call(data.frame, s1)
s1 <- s1 %>% group_by(Col2) %>% mutate(percent = n * 100 / sum(n))
s1 <- do.call(data.frame, s1)
y_lab <- str_c(names(df)[x1], " Percent")
p <-
ggplot(data = s1, aes(
x = Col2,
y = percent,
fill = as.factor(Col1)
)) +
geom_bar(
position = "fill",
color = "blue",
stat = "identity",
alpha = .6
) +
scale_y_continuous(labels = scales::percent_format(accuracy = 1)) +
scale_fill_brewer(palette = "Paired") +  ggthemes::theme_par() +
labs(x = names(df)[x2],
y = y_lab,
fill = names(df)[x1]) +
labs(title = str_c(names(df)[x1], " by ", names(df)[x2])) +
theme(axis.text.x = element_text(vjust = 2))
return(p)
}
# define a vector for all factor variables
attr_factors <-
c(5, 7, 9:12, 14:15, 17:18, 23, 25:26, 28, 31)
# print bar plot for each factor
for (attr_fac in attr_factors) {
attr_plot <- getFactorPctPlot(main.df, 3, attr_fac)
print(attr_plot)
}
# define a vector for all continuous variables
attr_continuous <- c(4, 6, 8, 13, 19:21, 24, 29:30, 32:35)
for (attr_con in attr_continuous) {
attr_df <- main.df[,c(3,attr_con)]
names(attr_df) <- c("Attrition", "Variable")
attr_plot2 <- ggplot(attr_df, aes(x=Variable, fill=Attrition)) +
geom_histogram(alpha=0.5, position="identity", color="blue") +
labs(x=names(main.df)[attr_con], y="Count") +
stat_bin(bins=30)+
scale_fill_brewer(palette = "Paired") +  ggthemes::theme_par()
print(attr_plot2)
}
attr_continuous <- c(4, 6, 8, 13, 19:21, 24, 29:30, 32:35)
for (attr_con in attr_continuous) {
attr_df <- main.df[,c(3,attr_con)]
names(attr_df) <- c("Attrition", "Variable")
attr_plot2 <- ggplot(attr_df, aes(x=Variable, fill=Attrition)) +
geom_histogram(alpha=0.5, position="identity") +
labs(x=names(main.df)[attr_con], y="Count") +
stat_bin(bins=30)+
scale_fill_brewer(palette = "Paired") +  ggthemes::theme_par()
print(attr_plot2)
}
attr_continuous <- c(4, 6, 8, 13, 19:21, 24, 29:30, 32:35)
for (attr_con in attr_continuous) {
attr_df <- main.df[,c(3,attr_con)]
names(attr_df) <- c("Attrition", "Variable")
attr_plot2 <- ggplot(attr_df, aes(x=Variable)) +
geom_histogram(alpha=0.5, position="identity") +
labs(x=names(main.df)[attr_con], y="Count") +
stat_bin(bins=30)+
scale_fill_brewer(palette = "Paired") +  ggthemes::theme_par() + facet_wrap(~Attrition)
print(attr_plot2)
}
library(corrplot)
library(mosaic)
library(performance)
library(see)
library(varhandle)
library(GGally)
# correlation heat map for visual inspection of correlation
corr.df <-
main.df
# convert factors into integers
corr.df[c(
"Attrition",
"JobRole",
"BusinessTravel",
"Department",
"EducationField",
"Gender",
"JobSatisfaction",
"MaritalStatus",
"OverTime"
)] <-
lapply(corr.df[c(
"Attrition",
"JobRole",
"BusinessTravel",
"Department",
"EducationField",
"Gender",
"JobSatisfaction",
"MaritalStatus",
"OverTime"
)], as.integer)
corr.df$Attrition <- as.numeric(main.df$Attrition)
corr.num.df <- corr.df %>% keep(is.numeric)
cor(corr.num.df, use = "complete.obs")
corrplot(
round(cor(corr.num.df, use = "complete.obs"), 2),
title = "Correlation Plot for Continuous Variables",
type = "lower",
addCoef.col = "grey",
number.digits = 2,
tl.pos = "ld",
method = "color",
tl.cex = .65,
tl.col = 'black',
order = "hclust",
diag = FALSE,
mar = c(0, 0, 5, 0),
bg = "ivory1",
tl.srt = 45
)
main.df %>%
select(JobInvolvement, TotalWorkingYears, WorkLifeBalance, YearlySalary, Attrition) %>%
ggpairs(mapping = aes(color = Attrition))
multi.col.model <-
lm(
as.numeric(Attrition) ~ Age + Gender + MaritalStatus + DistanceFromHome + Education + EducationField + Department + BusinessTravel + JobInvolvement + JobLevel + JobRole + NumCompaniesWorked + TotalWorkingYears + TrainingTimesLastYear + YearsAtCompany + YearsInCurrentRole + YearsSinceLastPromotion + YearsWithCurrManager + EnvironmentSatisfaction + JobSatisfaction + RelationshipSatisfaction + WorkLifeBalance + PercentSalaryHike + PerformanceRating + StockOptionLevel,
data = main.df
)
multi.col.output <- check_collinearity(multi.col.model)
multi.col.output
plot(multi.col.output)
cor(corr.num.df, use = "complete.obs")
corrplot(
round(cor(corr.num.df, use = "complete.obs"), 2),
title = "Correlation Plot for Continuous Variables",
type = "lower",
addCoef.col = "grey",
number.digits = 2,
tl.pos = "ld",
method = "color",
tl.cex = .5,
tl.col = 'black',
order = "hclust",
diag = FALSE,
mar = c(0, 0, 5, 0),
bg = "ivory1",
hclust.method = "complete"
)
corrplot(
round(cor(corr.num.df, use = "complete.obs"), 2),
title = "Correlation Plot for Continuous Variables",
type = "lower",
addCoef.col = "grey",
number.digits = 2,
tl.pos = "ld",
method = "color",
tl.cex = .75,
tl.col = 'black',
order = "hclust",
diag = FALSE,
mar = c(0, 0, 5, 0),
bg = "ivory1",
hclust.method = "complete"
)
corrplot(
round(cor(corr.num.df, use = "complete.obs"), 2),
title = "Correlation Plot for Continuous Variables",
type = "lower",
addCoef.col = "grey",
number.digits = 2,
tl.pos = "ld",
method = "color",
tl.cex = .75,
tl.col = 'black',
order = "hclust",
diag = FALSE,
mar = c(0, 0, 5, 0),
bg = "ivory1",
hclust.method = "complete",
tl.srt = 90
)
corrplot(
round(cor(corr.num.df, use = "complete.obs"), 2),
title = "Correlation Plot for Continuous Variables",
type = "lower",
addCoef.col = "grey",
number.digits = 2,
tl.pos = "ld",
method = "color",
tl.cex = .75,
tl.col = 'black',
order = "hclust",
diag = FALSE,
mar = c(0, 0, 5, 0),
bg = "ivory1",
hclust.method = "complete",
tl.srt = 180
)
corrplot(
round(cor(corr.num.df, use = "complete.obs"), 2),
title = "Correlation Plot for Continuous Variables",
type = "lower",
addCoef.col = "grey",
number.digits = 2,
tl.pos = "ld",
method = "color",
tl.cex = .75,
tl.col = 'black',
order = "hclust",
diag = FALSE,
mar = c(0, 0, 5, 0),
bg = "ivory1",
hclust.method = "complete",
tl.srt = 0
)
corrplot(
round(cor(corr.num.df, use = "complete.obs"), 2),
title = "Correlation Plot for Continuous Variables",
type = "lower",
addCoef.col = "grey",
number.digits = 2,
tl.pos = "ld",
method = "color",
tl.cex = .75,
tl.col = 'black',
order = "hclust",
diag = FALSE,
mar = c(0, 0, 5, 0),
bg = "ivory1",
hclust.method = "complete",
tl.srt = 1
)
corrplot(
round(cor(corr.num.df, use = "complete.obs"), 2),
title = "Correlation Plot for Continuous Variables",
type = "lower",
addCoef.col = "grey",
number.digits = 2,
method = "color",
tl.pos = "ld",
tl.srt = 1,
tl.cex = .75,
tl.col = 'black',
order = "hclust",
diag = FALSE,
mar = c(0, 0, 5, 0),
bg = "ivory1",
hclust.method = "complete",
cl.align.text = "c",
cl.cex=10
)
corrplot(
round(cor(corr.num.df, use = "complete.obs"), 2),
title = "Correlation Plot for Continuous Variables",
type = "lower",
addCoef.col = "grey",
number.digits = 2,
method = "color",
tl.pos = "ld",
tl.srt = 1,
tl.cex = .75,
tl.col = 'black',
order = "hclust",
diag = FALSE,
mar = c(0, 0, 5, 0),
bg = "ivory1",
hclust.method = "complete",
cl.align.text = "c",
cl.cex=1
)
corrplot(
round(cor(corr.num.df, use = "complete.obs"), 2),
title = "Correlation Plot for Continuous Variables",
type = "lower",
addCoef.col = "grey",
number.digits = 2,
method = "color",
tl.pos = "ld",
tl.srt = 1,
tl.cex = .75,
tl.col = 'black',
order = "hclust",
diag = FALSE,
mar = c(0, 0, 5, 0),
bg = "ivory1",
hclust.method = "complete",
cl.align.text = "c",
cl.cex=.75,
number.cex=.75
)
corrplot(
round(cor(corr.num.df, use = "complete.obs"), 2),
title = "Correlation Plot for Continuous Variables",
type = "lower",
addCoef.col = "grey",
method = "color",
tl.pos = "ld",
tl.srt = 1,
tl.cex = .65,
tl.col = 'black',
order = "hclust",
diag = FALSE,
mar = c(0, 0, 5, 0),
bg = "ivory1",
hclust.method = "complete",
cl.align.text = "c",
cl.cex=.65,
number.digits = 2,
number.cex=.65,
pch=TRUE
)
corrplot(
round(cor(corr.num.df, use = "complete.obs"), 2),
title = "Correlation Plot for Continuous Variables",
type = "lower",
addCoef.col = "grey",
method = "color",
tl.pos = "ld",
tl.srt = 1,
tl.cex = .55,
tl.col = 'black',
order = "hclust",
diag = FALSE,
mar = c(0, 0, 5, 0),
bg = "ivory1",
hclust.method = "complete",
cl.align.text = "c",
cl.cex=.55,
number.digits = 2,
number.cex=.55
)
main.df %>%
select(OverTime, JobInvolvement, TotalWorkingYears, WorkLifeBalance, YearlySalary, YearsWithCurrManager, MaritalStatus,  YearsInCurrentRole, JobLevel, Attrition) %>%
ggpairs(mapping = aes(color = Attrition))
install.packages("doBy")
library(caret)
library(igraph)
library(class)
library(doBy)
# new dataset for KNN
knn.df <- main.df
# convert factors into integers
knn.df[c(
"Attrition",
"JobRole",
"BusinessTravel",
"Department",
"EducationField",
"Gender",
"JobSatisfaction",
"MaritalStatus",
"OverTime",
"Over18"
)] <-
lapply(knn.df[c(
"Attrition",
"JobRole",
"BusinessTravel",
"Department",
"EducationField",
"Gender",
"JobSatisfaction",
"MaritalStatus",
"OverTime",
"Over18"
)], as.integer)
# split data into train and test data
set.seed(1257)
partition_df <-
sample(seq_len(nrow(knn.df)), size = nrow(knn.df) * 0.7)
train.df <- knn.df[partition_df,]
test.df <- knn.df[-partition_df,]
# run classification model on all the features
knn_classification <-
knn(train.df[, 3:35],
test.df[, 3:35],
train.df$Attrition,
prob = TRUE,
k = 5)
table(knn_classification, test.df$Attrition)
results <-
confusionMatrix(table(knn_classification, test.df$Attrition))
results
# create dataframe for accuracy results
knn_acc <-
data.frame(
feature_names = character(0),
acc = numeric(0),
sens = numeric(0),
spec = numeric(0)
)
# new train and test data
partition_df <-
sample(seq_len(nrow(knn.df)), size = nrow(knn.df) * 0.7)
train.df <- knn.df[partition_df,]
test.df <- knn.df[-partition_df,]
# Run KNN on all of the features
for (i in 3:dim(knn.df)[2]) {
if (i > 2) {
knn_classification = knn(
data.frame(train.df[, i]),
data.frame(test.df[, i]),
train.df$Attrition,
prob = TRUE,
k = 100
)
results <-
confusionMatrix(table(knn_classification, test.df$Attrition))
temp_df <-
data.frame(
feature_names = colnames(main.df[i]),
acc = results[[3]][1],
sens = results$byClass[1],
spec = results$byClass[2]
)
knn_acc <- rbind(knn_acc, temp_df)
}
knn_summary <- summaryBy(data=knn_acc, Accuracy + Sensitivity + Specificity ~ k, FUN=mean, keep.names=T)
library(caret)
library(igraph)
library(class)
library(doBy)
# new dataset for KNN
knn.df <- main.df
# convert factors into integers
knn.df[c(
"Attrition",
"JobRole",
"BusinessTravel",
"Department",
"EducationField",
"Gender",
"JobSatisfaction",
"MaritalStatus",
"OverTime",
"Over18"
)] <-
lapply(knn.df[c(
"Attrition",
"JobRole",
"BusinessTravel",
"Department",
"EducationField",
"Gender",
"JobSatisfaction",
"MaritalStatus",
"OverTime",
"Over18"
)], as.integer)
# split data into train and test data
set.seed(1257)
partition_df <-
sample(seq_len(nrow(knn.df)), size = nrow(knn.df) * 0.7)
train.df <- knn.df[partition_df,]
test.df <- knn.df[-partition_df,]
# run classification model on all the features
knn_classification <-
knn(train.df[, 3:35],
test.df[, 3:35],
train.df$Attrition,
prob = TRUE,
k = 5)
table(knn_classification, test.df$Attrition)
results <-
confusionMatrix(table(knn_classification, test.df$Attrition))
results
# create dataframe for accuracy results
knn_acc <-
data.frame(
feature_names = character(0),
acc = numeric(0),
sens = numeric(0),
spec = numeric(0)
)
# new train and test data
partition_df <-
sample(seq_len(nrow(knn.df)), size = nrow(knn.df) * 0.7)
train.df <- knn.df[partition_df,]
test.df <- knn.df[-partition_df,]
# Run KNN on all of the features
for (i in 3:dim(knn.df)[2]) {
if (i > 2) {
knn_classification = knn(
data.frame(train.df[, i]),
data.frame(test.df[, i]),
train.df$Attrition,
prob = TRUE,
k = 100
)
results <-
confusionMatrix(table(knn_classification, test.df$Attrition))
temp_df <-
data.frame(
feature_names = colnames(main.df[i]),
acc = results[[3]][1],
overall = results$overall[1],
sens = results$byClass[1],
spec = results$byClass[2]
)
knn_acc <- rbind(knn_acc, temp_df)
}
knn_summary <- summaryBy(data=knn_acc, Accuracy + Sensitivity + Specificity ~ k, FUN=mean, keep.names=T)
knn_summary <- summaryBy(data=knn_acc, acc + sens + spec ~ k, FUN=mean, keep.names=T)
knn_best <- which.max(knn_summary[,2])
knn_best
install.packages(c("doParallel", "HH", "rminer"))
